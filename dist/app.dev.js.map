{"version":3,"sources":["app.js"],"names":["express","require","path","app","mongoose","bodyparser","connect","useNewUrlParser","useUnifiedTopology","port","contactSchema","Schema","name","String","phone","email","address","locality","contact","model","use","urlencoded","set","join","__dirname","get","req","res","status","render","post","mydata","body","save","then","send","listen","console","log"],"mappings":";;AAAA,IAAMA,OAAO,GAAEC,OAAO,CAAC,SAAD,CAAtB;;AACC,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,GAAG,GAAEH,OAAO,EAAlB;;AACC,IAAII,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMI,UAAU,GAACJ,OAAO,CAAC,aAAD,CAAxB;;AACFG,QAAQ,CAACE,OAAT,CAAiB,kCAAjB,EAAqD;AAACC,EAAAA,eAAe,EAAE,IAAlB;AAAuBC,EAAAA,kBAAkB,EAAC;AAA1C,CAArD;AACC,IAAMC,IAAI,GAAE,EAAZ;AACA,IAAIC,aAAa,GAAG,IAAIN,QAAQ,CAACO,MAAb,CAAoB;AACrCC,EAAAA,IAAI,EAAEC,MAD+B;AAErCC,EAAAA,KAAK,EAAED,MAF8B;AAGrCE,EAAAA,KAAK,EAAEF,MAH8B;AAIrCG,EAAAA,OAAO,EAAEH,MAJ4B;AAKrCI,EAAAA,QAAQ,EAAEJ;AAL2B,CAApB,CAApB;AAOC,IAAIK,OAAO,GAACd,QAAQ,CAACe,KAAT,CAAe,SAAf,EAAyBT,aAAzB,CAAZ;AACDP,GAAG,CAACiB,GAAJ,CAAQ,SAAR,EAAkBpB,OAAO,UAAP,CAAe,QAAf,CAAlB;AACAG,GAAG,CAACiB,GAAJ,CAAQpB,OAAO,CAACqB,UAAR,EAAR;AACAlB,GAAG,CAACmB,GAAJ,CAAQ,aAAR,EAAsB,KAAtB;AACAnB,GAAG,CAACmB,GAAJ,CAAQ,OAAR,EAAgBpB,IAAI,CAACqB,IAAL,CAAUC,SAAV,EAAoB,OAApB,CAAhB;AACArB,GAAG,CAACsB,GAAJ,CAAQ,GAAR,EAAY,UAACC,GAAD,EAAKC,GAAL,EAAW;AAEnBA,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,MAAhB,CAAuB,UAAvB;AAEH,CAJD;AAKA1B,GAAG,CAACsB,GAAJ,CAAQ,UAAR,EAAmB,UAACC,GAAD,EAAKC,GAAL,EAAW;AAE3BA,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,MAAhB,CAAuB,aAAvB;AAEH,CAJA;AAKD1B,GAAG,CAAC2B,IAAJ,CAAS,UAAT,EAAoB,UAACJ,GAAD,EAAKC,GAAL,EAAW;AAC3B,MAAII,MAAM,GAAC,IAAIb,OAAJ,CAAYQ,GAAG,CAACM,IAAhB,CAAX;AACAD,EAAAA,MAAM,CAACE,IAAP,GAAcC,IAAd,CAAmB,YAAI;AACnBP,IAAAA,GAAG,CAACQ,IAAJ,CAAS,sCAAT;AACH,GAFD,WAES,YAAI;AACTR,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqB,gCAArB;AACH,GAJD,EAF2B,CAQ3B;AAEH,CAVD;AAYAhC,GAAG,CAACiC,MAAJ,CAAW3B,IAAX,EAAgB,YAAI;AAChB4B,EAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACH,CAFD","sourcesContent":["const express= require(\"express\");\r\n const path = require('path');\r\n const app= express();\r\n  var mongoose = require('mongoose');\r\n  const bodyparser=require(\"body-parser\")\r\nmongoose.connect('mongodb://localhost/contactdance', {useNewUrlParser: true,useUnifiedTopology:true});\r\n const port= 80;\r\n var contactSchema = new mongoose.Schema({\r\n    name: String,\r\n    phone: String,\r\n    email: String,\r\n    address: String,\r\n    locality: String,\r\n  });\r\n  var contact=mongoose.model('contact',contactSchema)\r\n app.use('/static',express.static('static'));\r\n app.use(express.urlencoded());\r\n app.set('view engine','pug');\r\n app.set('views',path.join(__dirname,'views'));\r\n app.get('/',(req,res)=>{\r\n    \r\n     res.status(200).render('home.pug');\r\n\r\n })\r\n app.get('/contact',(req,res)=>{\r\n    \r\n    res.status(200).render('contact.pug');\r\n\r\n})\r\napp.post('/contact',(req,res)=>{\r\n    var mydata=new contact(req.body);\r\n    mydata.save().then(()=>{\r\n        res.send(\"this item has been saved to database\");\r\n    }).catch(()=>{\r\n        res.status(400).send(\"item was not saved to database\")\r\n    })\r\n\r\n    // res.status(200).render('contact.pug');\r\n\r\n})\r\n\r\napp.listen(port,()=>{\r\n    console.log(\"application has started sucessfully\");\r\n});"],"file":"app.dev.js"}